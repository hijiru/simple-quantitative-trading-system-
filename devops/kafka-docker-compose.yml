---
version: '2'
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - kafka-net
  kafka-1:
    container_name: kafka-1
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
  
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
  kafka-2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
    ports:
      - 39092:39092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
  producer-1:
    build: 
      context: ./src/producer
      dockerfile: Dockerfile
    environment:
      - KAFKA_TOPIC_NAME=test
      - KAFKA_SERVER=kafka-1
      - KAFKA_PORT=9092
    ports:
      - 8001:8001
    depends_on:
      - kafka-1
      - kafka-2 
      - zookeeper-1
    command: sh -c "sleep 10 && python producer.py"
    networks:
      - kafka-net
  comsumer-1:
    build: 
      context: ./src/comsumer
      dockerfile: Dockerfile
    environment:
      - KAFKA_TOPIC_NAME=test
      - KAFKA_SERVER=kafka-1
      - KAFKA_PORT=9092
    ports:
      - 8000:8000
    depends_on:
      - kafka-1
      - kafka-2
      - zookeeper-1
    command: sh -c "sleep 10 && python comsumer.py"
    networks:
      - kafka-net

  ts-node-docker:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./src:/home/node/app/src
      - ./nodemon.json:/home/node/app/nodemon.json
    container_name: ts-node-docker
    expose:
      - '4000'
    ports:
      - '4000:4000'
    networks:
        - kafka-net
    command: npm run dev
  mongodb:
      restart: always
      image: "mongo:bionic"
      ports:
        - "27017:27017"
      volumes:
        - "./storage/mongodb_data:/data/db"
      env_file:
        - ../.env
      networks:
        - kafka-net
      
  redis:
      restart: always
      image: "redis:alpine"
      ports:
        - "6379:6379"
      volumes:
        - "./data:/data"
      networks:
        - kafka-net
      # mysql:
networks:
  kafka-net:
    driver: bridge